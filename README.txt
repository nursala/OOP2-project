
Project Name: Bullet Echo
שמות הסטודנטים:

עאמר אבו סיר – ת"ז: 325535193

נור צלאח – ת"ז: 212426603

שאדי יונס – ת"ז: 325129385


---

1-הסבר כללי:
המשחק Bullet Echo הוא משחק יריות טקטי מבוסס ראייה מוגבלת והסתרה. השחקן שולט בדמות אחת בזירה חשוכה, כאשר שדה הראייה שלו מוגבל על ידי מנגנון תאורה בצורת חרוט (Cone Vision).
במהלך המשחק, מופיעים אויבים חכמים שמגיבים לתנועות השחקן, רודפים אחריו, ויורים עליו. מטרת השחקן היא לשרוד, לאסוף מתנות (כמו מגן, מהירות, תחמושת), ולחסל את כל האויבים באמצעות ירי מדויק ואסטרטגי.

המשחק כולל אלמנטים מתקדמים כמו מערכת אור מותאמת לפי שדה ראייה, אינטראקציה עם קירות, ניהול קליעים (Bullets), שימוש במצב של אויבים (State Machine), ניהול סצנות, ומחלקות לניהול משאבים, צלילים, לחצנים, ועוד.

המשחק נבנה באמצעות ++C תוך שימוש בספריות SFML ו־Box2D, ושומר על עקרונות OOP, תבניות תכנון (Design Patterns), וקוד נקי ומודולרי.
---

2-רשימת קבצים:
- **AStarPathfinder.h** – מיישם את אלגוריתם A* למציאת מסלול חכם.
- **Animation.h** – מנהל אנימציות של אובייקטים כמו שחקן ואויבים.
- **ArmorBar.h** – מציג את כמות השריון של השחקן.
- **AttackingState.h** – מצב בו אויב תוקף את השחקן.
- **AttakStrategy.h** – מחלקת בסיס לכל אסטרטגיות הירי במשחק.
- **Bar.h** – מחלקה כללית שמייצגת פס (לבריאות, שריון וכו').
- **BaseResourceManager.h** – מחלקת בסיס לניהול טקסטורות/צלילים עם Singleton.
- **Bullet.h** – קליע שנורה ע"י שחקן או אויב, עם מהירות וכיוון.
- **Button.h** – כפתור לחיץ בממשק המשתמש.
- **Character.h** – מחלקת בסיס לשחקן ואויבים – תנועה, חיים, ירי.
- **ChooseLevelScreen.h** – מסך בחירת שלב לפני התחלת משחק.
- **Command.h** – מחלקת בסיס לפקודות בתבנית Command Pattern.
- **Constants.h** – שומר הגדרות קבועות (גדלים, מהירויות וכו').
- **ContactListener.h** – מאזין להתנגשויות במשחק עם Box2D.
- **Controller.h** – שולט על המעברים בין מסכים והמשחק הכללי.
- **Enemy.h** – מימוש של אויב עם מצבים, תנועה וירי.
- **Entity.h** – בסיס לכל אובייקט שנע וניתן לצייר אותו (שחקן, אויב, קליע וכו').
- **ExitCommand.h** – פקודה לסגירת המשחק או יציאה מהמסך.
- **Factory.h** – יוצר אובייקטים מסוגים שונים לפי מפתח.
- **GameOver.h** – מסך שמוצג לאחר כישלון במשחק.
- **GameSessionData.h** – שומר נתונים של סשן משחק – נשקים, מצב, שלב נוכחי.
- **GameWIn.h** – מסך שמוצג לאחר ניצחון במשחק.
- **Gift.h** – מחלקת בסיס לכל המתנות – נלקחות ע"י השחקן ומפעילות אפקט.
- **HandGun.h** – נשק מסוג אקדח.
- **HealthBar.h** – מציג את פס החיים של השחקן או אויב.
- **Help.h** – מסך עזרה – מסביר שליטה, סוגי אויבים ומתנות.
- **HomeScreen.h** – מסך הבית של המשחק.
- **IQChaseStrategy.h** – אסטרטגיה בה האויב רודף אחרי השחקן בצורה חכמה.
- **KeyboardMoveStrategy.h** – אסטרטגיית תנועה לפי מקשי מקלדת (לשחקן).
- **LevelManager.h** – אחראי על שליטה ברמות (שלבים).
- **LoadGame.h** – מסך טעינה של שמירה קיימת.
- **LoadMap.h** – טוען את שלב המשחק מקובץ JSON.
- **Market.h** – מסך בו ניתן לרכוש נשקים או שדרוגים.
- **MoveStrategy.h** – מחלקת בסיס לכל תנועת AI במשחק.
- **PauseScreen.h** – מסך הפסקה – אפשר להמשיך או לצאת.
- **PlayGround.h** – המסך שבו המשחק עצמו מתרחש.
- **Player.h** – הדמות הנשלטת ע"י השחקן – תנועה, ירי, אינטראקציה.
- **PopScreenCommand.h** – פקודה להורדת המסך העליון מהמחסנית.
- **PopToHomeCommand.h** – פקודה לחזור ישירות למסך הבית.
- **PushScreenCommand.h** – פקודה לדחיפת מסך חדש למחסנית המסכים.
- **RayCastClosest.h** – ביצוע Raycasting ומציאת אובייקט קרוב.
- **RenderLayers.h** – הגדרת שכבות ציור למסכים/אלמנטים.
- **Rifle.h** – נשק מסוג רובה – מאוזן.
- **Screen.h** – מחלקת בסיס לכל מסך – מאפשר ציור ועדכון.
- **Shotgun.h** – נשק מסוג שוטגאן – טווח קצר ונזק גבוה.
- **SimpleShootStrategy.h** – אסטרטגיית ירי פשוטה – ירי ישר קדימה.
- **SmartWeaponCommand.h** – פקודה להפעלת ירי עם לוגיקת חוכמה.
- **Sniper.h** – נשק טווח רחוק, איטי אך קטלני.
- **SoundManager.h** – מנהל כל הצלילים במשחק – מוזיקה, אפקטים וכו'.
- **SplashScreen.h** – מסך פתיחה קצר עם לוגו.
- **StartGameCommand.h** – פקודה להתחלת המשחק מהתפריט הראשי.
- **StartMusicCommand.h** – פקודה להפעלת מוזיקת רקע.
- **State.h** – מחלקת בסיס למצבים של אויבים.
- **Statusbar.h** – סרגל המציג חיים, שריון וכו'.
- **StopMusicCommand.h** – פקודה להפסקת המוזיקה.
- **TextureManager.h** – מנהל כל התמונות/הטקסטורות במשחק.
- **VisionLight.h** – אחראי על שדה הראייה של השחקן או אויב.
- **WalkingState.h** – מצב בו האויב נע אקראית.
- **Weapon.h** – מחלקת בסיס לכל כלי הנשק.
- **WeaponLight.h** – אור שמחובר לנשק – לתצוגת ירי.
- **World.h** – מנהל את העולם – התנגשות, ישויות, עדכון וכו'.---

3-מבני נתונים ועקרונות נוספים בשימוש:
std::vector
לאחסון אובייקטים מרובים כמו ישויות, קליעים, כפתורים, אורות ועוד.

std::unordered_map
לאחסון מהיר של טקסטורות, צלילים, או מצבים לפי מפתח.

std::set
לשמירת רשימת נשקים ייחודית שקנה השחקן – אין כפילויות.

std::stack
לניהול מסכים במבנה של LIFO – לדוגמה: מעבר בין תפריט, משחק, עזרה, חזרה אחורה.

std::shared_ptr / std::unique_ptr / std::weak_ptr
מצביעים חכמים לניהול בטוח של זיכרון בין אובייקטים.
לדוגמה: Bullet שייך ל־World אך מכוון ל־Character מבלי ליצור דליפת זיכרון.

עקרונות תכנות בשימוש:
OOP – תכנות מונחה עצמים
מחלקות כמו Player, Enemy, Weapon, Gift מבוססות על היררכיית ירושה, פולימורפיזם, ומחלקות בסיס.

Design Patterns – תבניות עיצוב
שימוש ב־Factory ליצירת אובייקטים דינמיים לפי Enum.
שימוש ב־State Pattern לניהול התנהגות האויב (עומד, תוקף, עוקב).
שימוש ב־Singleton לניהול משאבים (ResourceManager).

Namespaces
נעשה שימוש ב־namespaces כדי לארגן מחלקות לפי תחומים ולמנוע התנגשויות שמות.

Smart Resource Management
כל המשאבים מנוהלים בעזרת ResourceManager אשר טוען רק פעם אחת ומשתף את המשאבים הדרושים.

---

4-אלגוריתמים חשובים ולוגיקות מרכזיות:
שדה ראייה דינמי (Cone Vision)
כל דמות במשחק (בעיקר השחקן) רואה רק אזור מוגבל בצורת חרוט לפי הכיוון שלה.
החרוט מבוסס על Raycasting שנשלח לזוויות קבועות סביב כיוון השחקן, עם חסימה על ידי קירות.
זה יוצר אווירה של מתח, הסתרה, והפתעות.

ירי אוטומטי לפי ראייה (Auto Shooting on Vision)
כאשר אויב נכנס לשדה הראייה של השחקן (Vision Cone),
המערכת מזהה את האויב ויורה עליו באופן אוטומטי – אין צורך בלחיצה ידנית.
הירי נעשה בצורה ממוקדת רק כאשר יש קו ראייה ישיר ואין חסימה.

מעבר חכם בין מסכים (Screen Stack)
כל המסכים במשחק (תפריט, משחק, עזרה, ניצחון וכו') מנוהלים בעזרת מחסנית (stack).
מסך חדש נדחף למחסנית, וכשיוצאים – הוא נשלף. כך אפשר לחזור אחורה בקלות בלי לאבד מצב קודם.

בינה מלאכותית של אויבים (Enemy AI + State Machine)
כל אויב מתנהג לפי מצב מוגדר: תנועה, רדיפה, או ירי.
המעבר בין המצבים מתבצע לפי האם ראה את השחקן, המרחק, או תנאי נוסף.
האויבים יכולים להשתמש ב־A* כדי לנווט בצורה חכמה לעבר השחקן.

מערכת ירי חכמה (Shooting System)
כל שחקן או אויב שיורה – מייצר Bullet שנע בכיוון מוגדר, מתנגש ונעלם אחרי זמן חיים קצר.
הבדיקה כוללת פגיעה באויבים, שחקן, קירות או עצמים אחרים.


מערכת מתנות (Gift System)
כל מתנה מוחבאת או גלויה – כאשר השחקן אוסף אותה, היא מפעילה השפעה מיידית.

מתנת Spy – הפיכת אויב לחבר זמני

כאשר השחקן אוסף את ה־Spy, אחד מהאויבים במפה נבחר אוטומטית והופך להיות חבר של השחקן.
הוא מתחיל לנוע עם השחקן, וכאשר הוא רואה אויב אחר בתוך שדה הראייה שלו – הוא יורה עליו לבד.
לאחר מספר שניות, הוא חוזר להיות אויב רגיל או נעלם.
ניהול תאורה מתקדם (Light System)
התאורה מתעדכנת לפי המיקום והכיוון של הדמות.
כל מקור אור משתמש ב־Raycasting לחסימה על ידי קירות ומעודכן רק כשצריך.

ניהול משאבים מרכזי (ResourceManager)
כל המשאבים (טקסטורות, סאונדים, רמות) נטענים פעם אחת בלבד ומשותפים לכל המחלקות – שומר על ביצועים וזיכרון.

מערכת נשקים (Weapon System)
במשחק קיימים ארבעה סוגי נשקים שונים: Handgun, Shotgun, Rifle, Sniper.
כל נשק בעל מאפיינים שונים: טווח, נזק, מהירות ירי.
ניתן לרכוש נשקים דרך מסך ה־Market, ולבחור נשק לפני תחילת המשחק.

מערכת רכישה חכמה (Market Logic)
במסך ה־Market, מופיעים כל סוגי הנשקים עם לחצן רכישה.
כאשר השחקן לוחץ על "קנה":
- המערכת בודקת האם הנשק כבר נקנה (באמצעות std::set).
- אם כן – מוצג לחצן "שחק" במקום "קנה".
- אחרת – הנשק נוסף לרשימת הנשקים של השחקן.
השחקן יכול לבחור רק נשק אחד לכל משחק.

---

5-אינטראקציה בין האובייקטים (Interaction Between Objects):
השחקן (Player)
נע בזירה, אוסף מתנות, ויורה באופן אוטומטי כאשר אויב נכנס לשדה הראייה שלו.
כאשר פוגע בו קליע – אם יש לו מגן (Shield) → המגן סופג את הפגיעה ומצטמצם.
אם אין מגן → השחקן מאבד חיים.
כאשר עובר על מתנה – האפקט מופעל מיידית.

אויבים (Enemies)
נעים באופן חכם לפי מצבם (תנועה, ירי, רדיפה).
כאשר רואים את השחקן – יורים עליו אוטומטית.
לא יורים אחד על השני (אין Friendly Fire).
ניתן לפגוע בהם עם קליעים של השחקן.
אויב יכול לפגוע ב־Spy אם הוא מזהה אותו כאויב.

Spy (אויב זמני בצד השחקן)
נבחר אוטומטית מאויב קיים ברגע שהשחקן אוסף את מתנת ה־Spy.
נע אחרי השחקן ויורה על אויבים רגילים כאשר הם בשדה הראייה שלו.
אם אויב רגיל פוגע בו – הוא יכול למות.
לאחר זמן קצוב, חוזר להיות אויב רגיל אם לא נהרג קודם.

קליעים (Bullets)
נורים על ידי השחקן, אויבים, או Spy.
כאשר פוגעים במטרה חוקית (שחקן או אויב) – גורמים נזק ונעלמים.
אם פוגעים בקיר – נעצרים ונעלמים מייד.
אין נזק בין חברים (אין Friendly Fire מהשחקן ל־Spy ולהפך).

קירות (Walls)
חוסמים תנועה של כל הדמויות (Player, Enemy, Spy).
חוסמים גם קרני תאורה וקליעים.
ברגע שקליע פוגע בקיר – הוא נעלם.

מתנות (Gifts)
כאשר שחקן עובר עליהן – מופעלות מיד ונותנות אפקט: מגן, חיים, מהירות, Spy וכו'.
לאחר ההפעלה – נעלמות מהמשחק.
כל מתנה יכולה להופיע רק פעם אחת בכל שלב.

אור (Light / Vision Cone)
האור של השחקן קובע את מה שהוא רואה – לא יכול לירות אם אויב לא בתוך ה־Cone.
Spy משתמש גם הוא בשדה ראייה משלו.
אויבים יורים רק אם רואים את השחקן.
---

6-באגים ידועים:
לא נמצאו באגים ידועים במהלך הפיתוח או הבדיקה של המשחק.
המערכת פועלת בצורה יציבה בכל המצבים שנבדקו.---

7-הערות נוספות:
שימוש במנוע הפיזיקה Box2D:
השתמשנו בספריית Box2D לצורך ניהול פיזיקה מדויקת של התנגשות בין אובייקטים, תזוזה, קרני תאורה, וגופים דינמיים.

שימוש במערכת התאורה Candle:
התאורה במשחק מבוססת על ספריית Candle המאפשרת ליצור אור בצורת חרוט (Vision Cone), כולל חסימה על ידי קירות ותמיכה באפקטים של אור רך וחזק.

יישום תבניות עיצוב (Design Patterns):
בפרויקט שולבו מספר תבניות עיצוב מתקדמות:

Factory Pattern – ליצירת אובייקטים כמו מתנות, קליעים, אויבים וכו'.

State Pattern – לניהול התנהגות האויבים במצבים משתנים (רדיפה, ירי, תנועה).

Singleton – לניהול אחיד של משאבים כמו טקסטורות וצלילים (ResourceManager).

טעינת מפות המשחק מקבצי JSON:
מפות השלבים נבנו מראש באמצעות עורך המפות Tiled ונשמרו כקבצי .json.
בעת טעינת המשחק, הקבצים מפוענחים ישירות וממופים לאובייקטים (קירות, אויבים, מתנות וכו') לפי שכבות.